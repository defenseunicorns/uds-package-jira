apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-setup-script
data:
  test_license.py: |
    #!/usr/bin/env python3

    import requests
    from requests.exceptions import RequestException
    import os
    import sys
    import time
    import json
    import logging
    from urllib3.exceptions import InsecureRequestWarning
    from typing import Optional, Dict, Any
    from bs4 import BeautifulSoup

    # Configure logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)

    # Suppress only the single warning from urllib3 needed.
    requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

    class Config:
        JIRA_DOMAIN = os.getenv("JIRA_DOMAIN", "")
        JIRA_ADMIN_USERNAME = os.getenv("JIRA_ADMIN_USERNAME", "")
        JIRA_ADMIN_PASSWORD = os.getenv("JIRA_ADMIN_PASSWORD", "")
        JIRA_ADMIN_EMAIL = os.getenv("JIRA_ADMIN_EMAIL", "")
        JIRA_ADMIN_FULLNAME = os.getenv("JIRA_ADMIN_FULLNAME", "")
        JIRA_LICENSE_KEY = os.getenv("JIRA_LICENSE_KEY", "")
        
        MAX_RETRIES = 30
        RETRY_INTERVAL = 10
        TIMEOUT = 30
        MAX_INIT_WAIT = 300  # 5 minutes
        INIT_CHECK_INTERVAL = 5  # 5 seconds

        @property
        def base_url(self) -> str:
            return f"https://{self.JIRA_DOMAIN}"
        
        @property
        def urls(self) -> Dict[str, str]:
            return {
                'status': f"{self.base_url}/status",
                'app_properties': f"{self.base_url}/secure/SetupApplicationProperties!default.jspa",
                'setup_properties': f"{self.base_url}/secure/SetupApplicationProperties.jspa",
                'license': f"{self.base_url}/secure/SetupLicense!default.jspa",
                'setup_license': f"{self.base_url}/secure/SetupLicense.jspa",
                'admin': f"{self.base_url}/secure/SetupAdminAccount!default.jspa",
                'setup_admin': f"{self.base_url}/secure/SetupAdminAccount.jspa",
                'mail': f"{self.base_url}/secure/SetupMailNotifications!default.jspa",
                'setup_mail': f"{self.base_url}/secure/SetupMailNotifications.jspa"
            }

    class JiraSetup:
        def __init__(self):
            self.config = Config()
            self.session = requests.Session()
            self.session.headers.update({
                "Content-Type": "application/x-www-form-urlencoded",
                "Origin": self.config.base_url,
                "Referer": f"{self.config.base_url}/"
            })
            # Disable SSL verification for development environments
            self.session.verify = False

        def _make_request(
            self, 
            method: str, 
            url: str, 
            data: Optional[Dict[str, str]] = None,
            expected_status_codes: tuple = (200, 302),
            long_timeout: bool = False
        ) -> requests.Response:
            """Make HTTP request with proper error handling and logging."""
            try:
                timeout = self.config.TIMEOUT if not long_timeout else self.config.MAX_INIT_WAIT
                response = self.session.request(
                    method=method,
                    url=url,
                    data=data,
                    timeout=timeout,
                    allow_redirects=True
                )
                
                logger.debug(f"Request to {url}: {response.status_code}")
                logger.debug(f"Response headers: {dict(response.headers)}")
                
                if response.status_code not in expected_status_codes:
                    logger.error(f"Unexpected status code: {response.status_code}")
                    logger.error(f"Response content: {response.text}")
                    raise RequestException(f"Unexpected status code: {response.status_code}")
                
                return response
                
            except RequestException as e:
                logger.error(f"Request failed: {str(e)}")
                raise

        def _extract_form_token(self, html_content: str) -> str:
            """Extract XSRF token from HTML form."""
            soup = BeautifulSoup(html_content, 'html.parser')
            token_input = soup.find('input', {'name': 'atl_token'})
            if not token_input or 'value' not in token_input.attrs:
                raise ValueError("Could not find XSRF token in form")
            return token_input['value']

        def wait_for_availability(self) -> None:
            """Wait for Jira to become available."""
            logger.info("Checking Jira initialization status...")
            
            # Initial wait for Jira to become responsive (matching job's 5s wait)
            logger.info("Initial 5 second wait for Jira to become responsive...")
            time.sleep(5)
            
            for attempt in range(self.config.MAX_RETRIES):
                try:
                    # First try to trigger database setup
                    logger.info("Triggering database setup...")
                    setup_response = self._make_request(
                        "GET",
                        f"{self.config.base_url}/secure/SetupDatabase!default.jspa",
                        expected_status_codes=(200, 302, 303, 404, 500),
                        long_timeout=True
                    )
                    
                    # Then check status
                    status_response = self._make_request(
                        "GET", 
                        self.config.urls['status'],
                        expected_status_codes=(200, 302, 303, 404, 500),
                        long_timeout=True
                    )
                    
                    try:
                        logger.debug(f"Full status response: {status_response.text}")
                        state = status_response.json().get("state", "")
                        logger.info(f"Current Jira state: {state}")
                        if state == "FIRST_RUN":
                            logger.info("Found FIRST_RUN state! Waiting 5s seconds for initialization...")
                            time.sleep(5)  # Match the job's 5s wait after finding FIRST_RUN
                            logger.info("Proceeding with setup...")
                            return
                        if state not in ["FIRST_RUN", "RUNNING"]:
                            logger.info(f"Jira state is {state}, waiting...")
                            time.sleep(self.config.RETRY_INTERVAL)
                            continue

                        # Check if setup wizard is accessible
                        response = self._make_request(
                            "GET",
                            f"{self.config.base_url}/secure/SetupApplicationProperties!default.jspa",
                            expected_status_codes=(200, 302, 303, 404, 500)
                        )
                        
                        if "jira-setupwizard" in response.text:
                            logger.info("Jira is available and ready for setup!")
                            return
                        
                        logger.info("Jira is running but not ready for setup, waiting...")
                        
                    except ValueError:
                        logger.warning("Could not parse Jira state")
                        time.sleep(self.config.RETRY_INTERVAL)
                        continue

                except Exception as e:
                    logger.warning(f"Attempt {attempt + 1} failed: {str(e)}")
                
                time.sleep(self.config.RETRY_INTERVAL)
            
            raise TimeoutError("Jira did not become available in time")

        def setup_application_properties(self) -> None:
            """Set up initial Jira application properties."""
            logger.info("Setting up application properties...")
            
            # Get the setup page
            response = self._make_request(
                "GET",
                f"{self.config.base_url}/secure/SetupApplicationProperties!default.jspa",
                expected_status_codes=(200, 302),
                long_timeout=True
            )
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Get the XSRF token
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise ValueError("Could not find XSRF token")
            token_value = token.get('value')
            
            # Submit application properties
            payload = {
                "atl_token": token_value,
                "title": "Jira",
                "mode": "private",
                "baseURL": self.config.base_url,  # Use config base_url
                "setupType": "custom"  # Add setupType as seen in form
            }
            
            logger.info("Submitting application properties...")
            response = self._make_request(
                "POST",
                f"{self.config.base_url}/secure/SetupApplicationProperties.jspa",
                data=payload,
                expected_status_codes=(200, 302),
                long_timeout=True
            )
            
            # Parse the response to check for errors
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Check for error messages
            error_msgs = soup.find_all(class_=['error', 'aui-message-error'])
            if error_msgs:
                for error in error_msgs:
                    logger.error(f"Form error: {error.get_text()}")
                raise RequestException("Application properties setup failed due to form errors")
            
            # Try to get the next form - either license setup or app properties
            next_form = soup.find('form', {'id': 'jira-setupwizard'}) or soup.find('form', {'id': 'setupLicenseForm'})
            if next_form:
                logger.info("Successfully advanced to license setup")
                return
                
            # If we're still on the app properties page, there might be validation errors
            if soup.find('form', {'action': 'SetupApplicationProperties.jspa'}):
                logger.error("Still on application properties page")
                logger.debug(f"Response content: {response.text}")
                raise RequestException("Application properties setup did not advance to next step")
                
            logger.info("Application properties setup completed")

        def setup_license(self) -> None:
            """Set up Jira license."""
            logger.info("Setting up license...")
            
            # First get the license page to obtain the form token
            response = self._make_request("GET", self.config.urls['license'])
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Extract form details
            form = soup.find('form', {'id': 'jira-setupwizard'}) or soup.find('form', {'id': 'setupLicenseForm'})
            if not form:
                logger.error("Could not find license setup form")
                logger.debug(f"Page content: {response.text}")
                raise ValueError("License setup form not found")
                
            token = self._extract_form_token(response.text)
            logger.debug(f"Found token: {token}")
            
            # Get the form action URL
            form_action = form.get('action', 'SetupLicense!default.jspa')
            if not form_action.startswith('http'):
                form_action = f"{self.config.base_url}/secure/{form_action}"
            
            logger.debug(f"Submitting license to: {form_action}")
            
            # Submit license with the correct token
            payload = {
                "setupLicenseKey": self.config.JIRA_LICENSE_KEY,
                "atl_token": token,
                "next": "Next"
            }
            
            logger.debug(f"Submitting payload: {payload}")
            response = self._make_request("POST", form_action, data=payload)
            
            # Check for error messages in the response
            soup = BeautifulSoup(response.text, 'html.parser')
            error_msgs = soup.find_all(class_=['error', 'aui-message-error'])
            if error_msgs:
                for error in error_msgs:
                    logger.error(f"Form error: {error.get_text()}")
                raise RequestException("License submission failed due to form errors")
                
            # Check if we're still on the license page
            if "SetupLicense" in response.url:
                logger.error("Still on license page after submission")
                logger.debug(f"Response content: {response.text}")
                raise RequestException("License submission did not advance to next step")
                
            logger.info("License setup completed")

        def setup_admin(self) -> None:
            """Set up admin account and complete setup wizard."""
            logger.info("Setting up admin account (final setup step)...")
            
            # Get admin setup page and extract token
            response = self._make_request("GET", self.config.urls['admin'])
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Extract form details
            form = soup.find('form', {'class': 'aui'})
            if not form:
                logger.error("Could not find admin setup form")
                logger.debug(f"Page content: {response.text}")
                raise ValueError("Admin setup form not found")
            
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise ValueError("Could not find XSRF token")
            token_value = token.get('value')
            
            # Submit admin details
            payload = {
                "fullname": self.config.JIRA_ADMIN_FULLNAME,
                "email": self.config.JIRA_ADMIN_EMAIL,
                "username": self.config.JIRA_ADMIN_USERNAME,
                "password": self.config.JIRA_ADMIN_PASSWORD,
                "confirm": self.config.JIRA_ADMIN_PASSWORD,
                "atl_token": token_value,
                "next": "Next"
            }
            
            logger.info("Submitting admin account details...")
            response = self._make_request(
                "POST",
                self.config.urls['setup_admin'],
                data=payload,
                expected_status_codes=(200, 302),
                long_timeout=True
            )
            
            # Now handle the mail notifications page
            response = self._make_request("GET", self.config.urls['mail'])
            soup = BeautifulSoup(response.text, 'html.parser')
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise ValueError("Could not find XSRF token for mail setup")
            token_value = token.get('value')
            
            # Submit the final step - select Later and click Finish
            payload = {
                "atl_token": token_value,
                "noemail": "true",
                "finish": "Finish",
                "baseURL": self.config.base_url  # Reaffirm the base URL in final step
            }
            
            logger.debug("Completing setup with email configuration later...")
            response = self._make_request(
                "POST", 
                self.config.urls['setup_mail'],
                data=payload,
                expected_status_codes=(200, 302),
                long_timeout=True
            )
            
            logger.info("Setup completed!")

        def verify_setup(self) -> None:
            """Verify Jira setup completion."""
            logger.info("Verifying setup...")
            response = self._make_request("GET", self.config.urls['status'])
            state = response.json().get("state", "UNKNOWN")
            
            if state not in ["RUNNING", "FIRST_RUN"]:
                raise RuntimeError(f"Unexpected Jira state after setup: {state}")
            logger.info(f"Setup verified successfully! Jira state: {state}")

        def get_jira_state(self) -> str:
            """Get the current state of Jira."""
            response = self._make_request("GET", self.config.urls['status'])
            return response.json().get("state", "UNKNOWN")

    def main():
        setup = JiraSetup()
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                setup.wait_for_availability()
                setup.setup_application_properties()  # First step - Set title, mode, base URL
                setup.setup_license()                 # Second step - Submit license
                setup.setup_admin()                   # Final step - Admin account and email config
                setup.verify_setup()
                logger.info("Setup completed successfully")
                return 0
            except Exception as e:
                retry_count += 1
                if retry_count >= max_retries:
                    logger.error(f"Setup failed: {str(e)}")
                    return 1
                logger.warning(f"Attempt {retry_count} failed: {str(e)}")
                logger.info("Waiting 30 seconds before retrying...")
                time.sleep(30)

    if __name__ == "__main__":
        main() 
