{{- if .Values.setup.createSecrets }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: jira-setup-script
data:
  test_license.py: |
    #!/usr/bin/env python3

    import requests
    from requests.exceptions import RequestException
    import os
    import sys
    import time
    import json
    import logging
    from urllib3.exceptions import InsecureRequestWarning
    from typing import Optional, Dict, Any
    from bs4 import BeautifulSoup

    # Configure logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)

    # Suppress only the single warning from urllib3 needed.
    requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

    class Config:
        def __init__(self):
            self.JIRA_DOMAIN = os.getenv("JIRA_DOMAIN", "jira.jira.svc.cluster.local:8080")
            self.JIRA_ADMIN_USERNAME = os.getenv("JIRA_ADMIN_USERNAME", "admin")
            self.JIRA_ADMIN_PASSWORD = os.getenv("JIRA_ADMIN_PASSWORD", "admin")
            self.JIRA_ADMIN_EMAIL = os.getenv("JIRA_ADMIN_EMAIL", "admin@uds.dev")
            self.JIRA_ADMIN_FULLNAME = os.getenv("JIRA_ADMIN_FULLNAME", "Admin User")
            self.JIRA_LICENSE_KEY = os.getenv("JIRA_LICENSE_KEY", "AAAB4Q0ODAoPeNqVUk2P2jAUvOdXROqlVRUUB7JZkCx1CaZkC8luAogDFxMexAWcyHZg2V/ffICgZRepR4/tmTfz5ss4B/2Zch21dIQ6VqvTtHU3GuuWadmaK4AqlvIeVYBLxDCRgWxtyGLgEsbHDHy6A+wGoxEJXe9pqP1mgjZO92TJyt+Y+GMSvoReRDQ/3y1ABKuJBCGxgc5U5C1j4nilYxmoVZNlIl3msWqUB0OmK3WgAho0VmwPWIkctChfyFiwrBKrELKn25xezhVRwU5d4ApEDW5r6QGVCR65B7fvQtZ/d7+bi9n71DNnTh60vXCSKDLbPCXhoDn+NemSjVQTexC/Haf2epmz9uHnw+scz/HZidfDQ68XEd8YWqaD2s5j+56PSFFRTrSiW1k4AbEHUVB0iecYgdd/NUK/7RsW8rvaBo7TIrXSFHowTcd8bDaRthYAPEmzDMSd3F9yESdUwr+bvP5dRZMJJs+xEh//7eMDrY860IPLOp4Lt3p0cqt/LXeg10v4Nu/olz1pI8oKlFMe/38Zblp1Peh1U+5wfNKOc+KWFog15UzWrerBqrzVJ5zFqeBSc1OuCiVS2NhikS528Y9l/SY/PWnE6a4e4GbcCr2Z807CJ7UK/lzsD+lDVU4wLAIUDh8J3BnMCPGC9z4pMZxph+utjboCFDTa3S1umpcLoVwqWBI2JELm2ZTkX02mq")
            self.TIMEOUT = 120  # Increased timeout for long operations
            self.RETRY_TIMEOUT = 20  # Shorter timeout for status checks
            self.MAX_INIT_WAIT = 300  # Maximum time to wait for initialization (5 minutes)
            self.INIT_CHECK_INTERVAL = 15  # How often to check status during initialization

        @property
        def base_url(self):
            return f"https://{self.JIRA_DOMAIN}"

        @property
        def urls(self):
            return {
                'status': f"{self.base_url}/status",
                'app_properties': f"{self.base_url}/secure/SetupApplicationProperties!default.jspa",
                'setup_properties': f"{self.base_url}/secure/SetupApplicationProperties.jspa",
                'license': f"{self.base_url}/secure/SetupLicense!default.jspa",
                'setup_license': f"{self.base_url}/secure/SetupLicense.jspa",
                'admin': f"{self.base_url}/secure/SetupAdminAccount!default.jspa",
                'setup_admin': f"{self.base_url}/secure/SetupAdminAccount.jspa",
                'mail': f"{self.base_url}/secure/SetupMailNotifications.jspa"
            }

    class JiraSetup:
        def __init__(self):
            self.config = Config()
            self.session = requests.Session()
            self.session.headers.update({
                "Content-Type": "application/x-www-form-urlencoded",
                "Origin": self.config.base_url,
                "Referer": f"{self.config.base_url}/",
                "Connection": "keep-alive"
            })
            self.session.verify = False

        def _make_request(
            self, 
            method: str, 
            url: str, 
            data: Optional[Dict[str, str]] = None,
            expected_status_codes: tuple = (200, 302),
            long_timeout: bool = False
        ) -> requests.Response:
            """Make HTTP request with proper error handling and logging."""
            try:
                logger.debug(f"Making {method} request to {url}")
                if data:
                    logger.debug(f"Request data: {data}")
                
                timeout = self.config.TIMEOUT if long_timeout else self.config.RETRY_TIMEOUT
                response = self.session.request(
                    method=method,
                    url=url,
                    data=data,
                    timeout=timeout,
                    allow_redirects=True
                )
                
                logger.debug(f"Response status: {response.status_code}")
                logger.debug(f"Response headers: {dict(response.headers)}")
                
                if response.status_code not in expected_status_codes:
                    logger.error(f"Unexpected status code: {response.status_code}")
                    logger.error(f"Response content: {response.text}")
                    raise RequestException(f"Unexpected status code: {response.status_code}")
                
                return response
                
            except RequestException as e:
                logger.error(f"Request failed: {str(e)}")
                raise

        def get_jira_state(self) -> Optional[str]:
            """Get current Jira state safely."""
            try:
                response = self._make_request("GET", self.config.urls['status'])
                data = response.json()
                return data.get('state')
            except Exception as e:
                logger.debug(f"Failed to get Jira state: {str(e)}")
                return None

        def wait_for_availability(self) -> None:
            """Wait for Jira to become available."""
            logger.info("Waiting for Jira to become available...")
            
            retries = 0
            while retries < 30:  # 5 minutes with 10s sleep
                state = self.get_jira_state()
                if state == "FIRST_RUN":
                    # Verify we can access the setup page
                    try:
                        response = self._make_request(
                            "GET", 
                            f"{self.config.base_url}/secure/SetupMode!default.jspa",
                            expected_status_codes=(200, 302)
                        )
                        if "jira-setupwizard" in response.text:
                            logger.info("Jira is available and ready for setup!")
                            return
                    except Exception as e:
                        logger.debug(f"Setup page not ready yet: {str(e)}")
                
                logger.info(f"Waiting for Jira to be ready (current state: {state})...")
                retries += 1
                time.sleep(10)
                
            raise Exception("Timed out waiting for Jira to become available")

        def wait_for_initialization(self) -> None:
            """Wait for Jira to complete database initialization."""
            logger.info("Waiting for database initialization to complete...")
            start_time = time.time()
            
            while (time.time() - start_time) < self.config.MAX_INIT_WAIT:
                state = self.get_jira_state()
                if state:
                    logger.info(f"Current state during initialization: {state}")
                    if state == "RUNNING":
                        logger.info("Database initialization completed!")
                        return
                    elif state == "FIRST_RUN":
                        logger.info("Still in FIRST_RUN state, continuing to wait...")
                
                logger.debug(f"Waiting {self.config.INIT_CHECK_INTERVAL} seconds before next check...")
                time.sleep(self.config.INIT_CHECK_INTERVAL)
            
            raise Exception(f"Database initialization did not complete within {self.config.MAX_INIT_WAIT} seconds")

        def setup_application_properties(self) -> None:
            """Set up initial Jira application properties."""
            logger.info("Setting up application properties...")
            
            # Get the setup page
            response = self._make_request(
                "GET", 
                self.config.urls['app_properties'],
                expected_status_codes=(200, 302),
                long_timeout=True  # Use long timeout for initial setup
            )
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Get the XSRF token
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise ValueError("Could not find XSRF token")
            token_value = token.get('value')
            
            # Submit application properties
            payload = {
                "atl_token": token_value,
                "title": "Jira",
                "mode": "private",  # Select Private mode
                "baseURL": self.config.base_url,
                "next": "Next"
            }
            
            logger.info("Submitting application properties...")
            response = self._make_request(
                "POST",
                self.config.urls['setup_properties'],
                data=payload,
                expected_status_codes=(200, 302),
                long_timeout=True  # Use long timeout for submission
            )
            
            # Check for successful submission
            if "SetupLicense" not in response.url:
                logger.error("Failed to advance to license setup page")
                logger.debug(f"Response URL: {response.url}")
                raise RequestException("Application properties setup did not advance to license page")
            
            logger.info("Application properties setup completed")

        def setup_license(self) -> None:
            """Set up Jira license."""
            logger.info("Starting license setup...")
            
            # First get the license page to obtain the form token
            logger.info("Fetching license setup page...")
            response = self._make_request("GET", self.config.urls['license'])
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Find the license setup form
            logger.info("Looking for license setup form...")
            form = soup.find('form', {'id': 'jira-setupwizard'})
            if not form:
                raise Exception("Could not find license setup form")
            
            logger.info("Found license setup form")
            
            # Get the XSRF token
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise Exception("Could not find XSRF token")
            
            token_value = token.get('value')
            logger.debug(f"Found token: {token_value}")
            
            # Submit the license
            logger.info(f"Submitting license to: {self.config.urls['setup_license']}")
            logger.debug("Submitting license payload...")
            
            payload = {
                'setupLicenseKey': self.config.JIRA_LICENSE_KEY,
                'atl_token': token_value,
                'next': 'Next'
            }
            
            try:
                # Use long timeout for license submission
                response = self._make_request(
                    "POST", 
                    self.config.urls['setup_license'],
                    data=payload,
                    expected_status_codes=(200, 302),
                    long_timeout=True
                )
                logger.info("License submitted successfully")
                
            except RequestException as e:
                if "Read timed out" in str(e):
                    # This is expected - Jira is processing the license
                    logger.info("Connection timed out during license processing (this is normal)")
                    # Give Jira a moment to process the license
                    time.sleep(10)
                else:
                    raise

        def setup_admin(self) -> None:
            """Set up admin account and complete setup wizard."""
            logger.info("Setting up admin account (final setup step)...")
            
            # Get admin setup page and extract token
            response = self._make_request("GET", self.config.urls['admin'])
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Extract form details
            form = soup.find('form', {'class': 'aui'})
            if not form:
                logger.error("Could not find admin setup form")
                logger.debug(f"Page content: {response.text}")
                raise ValueError("Admin setup form not found")
            
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise ValueError("Could not find XSRF token")
            token_value = token.get('value')
            
            # Submit admin details
            payload = {
                "fullname": self.config.JIRA_ADMIN_FULLNAME,
                "email": self.config.JIRA_ADMIN_EMAIL,
                "username": self.config.JIRA_ADMIN_USERNAME,
                "password": self.config.JIRA_ADMIN_PASSWORD,
                "confirm": self.config.JIRA_ADMIN_PASSWORD,
                "atl_token": token_value,
                "next": "Next"
            }
            
            logger.info("Submitting admin account details...")
            response = self._make_request(
                "POST",
                self.config.urls['setup_admin'],
                data=payload,
                expected_status_codes=(200, 302),
                long_timeout=True
            )
            
            # Now handle the mail notifications page
            soup = BeautifulSoup(response.text, 'html.parser')
            token = soup.find('input', {'name': 'atl_token'})
            if not token:
                raise ValueError("Could not find XSRF token for mail setup")
            token_value = token.get('value')
            
            # Submit the final step - select Later and click Finish
            mail_form_action = self.config.urls['mail']
            payload = {
                "atl_token": token_value,
                "noemail": "true",     # Changed from "configure": "later"
                "finish": "Finish"      # Keep the Finish button
            }
            
            logger.debug(f"Completing setup: {mail_form_action}")
            response = self._make_request("POST", mail_form_action, data=payload)
            
            logger.info("Setup completed!")

        def verify_setup(self) -> None:
            """Verify Jira setup completion."""
            logger.info("Verifying setup...")
            
            # Give Jira a moment to transition states
            time.sleep(5)
            
            state = self.get_jira_state()
            if not state:
                raise RuntimeError("Could not get Jira state during verification")
            
            if state != "RUNNING":
                raise RuntimeError(f"Setup failed - Jira is in {state} state instead of RUNNING")
            logger.info("Setup verified successfully - Jira is running!")

    def main():
        setup = JiraSetup()
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                setup.wait_for_availability()
                setup.setup_application_properties()  # First step
                setup.setup_license()                 # Second step
                setup.wait_for_initialization()       # Wait for DB init
                setup.setup_admin()                   # Final step
                setup.verify_setup()
                logger.info("Setup completed successfully")
                return 0
            except Exception as e:
                retry_count += 1
                if retry_count >= max_retries:
                    logger.error(f"Setup failed: {str(e)}")
                    return 1
                logger.warning(f"Attempt {retry_count} failed: {str(e)}")
                logger.info("Waiting 30 seconds before retrying...")
                time.sleep(30)

    if __name__ == '__main__':
        sys.exit(main()) 

{{- end }} 